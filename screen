package com.rcs.icall;

import org.abtollc.sdk.AbtoApplication;
import org.abtollc.sdk.AbtoPhone;
import org.abtollc.sdk.OnCallConnectedListener;
import org.abtollc.sdk.OnCallConnectedListener2;
import org.abtollc.sdk.OnCallDisconnectedListener2;
import org.abtollc.sdk.OnCallErrorListener;
import org.abtollc.sdk.OnCallHeldListener;
import org.abtollc.sdk.OnInitializeListener;
import org.abtollc.sdk.OnRemoteAlertingListener;
import org.abtollc.sdk.OnToneReceivedListener;
import org.abtollc.sdk.OnVideoEventListener;
import org.abtollc.sdk.AbtoCallEventsReceiver;

import android.Manifest;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.graphics.Point;
import android.media.AudioAttributes;
import android.media.AudioFormat;
import android.media.AudioManager;
import android.media.AudioRecord;
import android.media.AudioTrack;
import android.media.Image;
import android.media.MediaRecorder;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.PowerManager;
import android.os.PowerManager.WakeLock;
import android.os.RemoteException;
import android.telephony.PhoneStateListener;
import android.telephony.TelephonyManager;
import android.util.Log;
import android.view.KeyEvent;
import android.view.OrientationEventListener;
import android.view.SurfaceView;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.RequiresApi;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import com.rcs.Models.Contact;

import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import io.realm.Realm;


public class ScreenAV extends Activity implements OnCallConnectedListener,
		OnRemoteAlertingListener, OnCallDisconnectedListener2,
		OnCallHeldListener, OnToneReceivedListener, OnCallErrorListener, OnInitializeListener {

	protected static final String THIS_FILE = "ScreenAV";

	public static final String POINT_TIME = "pointTime";
	public static final String TOTAL_TIME = "totalTime";

	private AbtoPhone phone;
	private int activeCallId = AbtoPhone.INVALID_CALL_ID;

	private TextView status;
	private Button image_call_open;
	//	private Button pickUpVideo;
	private LinearLayout incomingCallLayout;
	private LinearLayout callInProgressLayout;
	SurfaceView localVideoSurface, remoteVideoSurface;

	private WakeLock mScreenWakeLock;
	private WakeLock mProximityWakeLock;

	private OrientationEventListener rotationListener;
	private Point videoViewSize;
	private boolean mInitialAutoSendVideoState;
	ArrayList<Contact> list = new ArrayList<>();
	Realm realm;
	Contact data;
	private String number;
	private boolean isCallActive = false;

	/**
	 * executes when activity have been created;
	 */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
		getWindow().addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD);
		getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
		getWindow().addFlags(WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON);

		super.onCreate(savedInstanceState);

		initWakeLocks();
		this.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
		this.requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.screen_caller);

		image_call_open = findViewById(R.id.image_call_open);

		phone = ((AbtoApplication) getApplication()).getAbtoPhone();
		mInitialAutoSendVideoState = phone.getConfig().isEnabledAutoSendRtpVideo();

//		image_call_open.setOnClickListener(new View.OnClickListener() {
//			@Override
//			public void onClick(View v) {
//				pickUp();
//			}
//		});


		try {
			phone.setSpeakerLevel(3.0F);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		try {
			phone.setMicrophoneLevel(3.0F);
		} catch (RemoteException e) {
			e.printStackTrace();
		}


		//Event handlers
		phone.setCallConnectedListener(new OnCallConnectedListener2() {
			@Override
			public void onCallConnected(int i, String s, String s1) {
				Log.e("onCallConnected i", String.valueOf(i));
				Log.e("onCallConnected s", s);
				Log.e("onCallConnected s1", s1);

				number = s1.split("To: <sip:")[1].split("@")[0];
				Log.e("onCallConnected number", number);
				if (Build.VERSION.SDK_INT > 23) {
					if (ContextCompat.checkSelfPermission(getApplicationContext(),
							Manifest.permission.CALL_PHONE)
							!= PackageManager.PERMISSION_GRANTED) {

						ActivityCompat.requestPermissions(ScreenAV.this,
								new String[]{Manifest.permission.CALL_PHONE},
								MY_PERMISSIONS_REQUEST_CALL_PHONE);

						// MY_PERMISSIONS_REQUEST_CALL_PHONE is an
						// app-defined int constant. The callback method gets the
						// result of the request.
						Log.e("debug permissaion", "Permission denied 144");
					} else {
						Log.e("debug permissaion", "Permission granted 146");
						Log.e("start call", "147");
						startCall();
					}
				} else {

					if (ActivityCompat.checkSelfPermission(ScreenAV.this,
							Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) {
						Toast.makeText(ScreenAV.this, "Permission Not Granted ", Toast.LENGTH_SHORT).show();
					} else {
						final String[] PERMISSIONS_STORAGE = {Manifest.permission.CALL_PHONE};
						ActivityCompat.requestPermissions(ScreenAV.this, PERMISSIONS_STORAGE, 9);
						Log.e("start call", "185");
						startCall();
					}
				}
			}

			@Override
			public void onCallConnected(int i, String s) {

			}
		});
		phone.setCallDisconnectedListener(this);
		phone.setOnCallHeldListener(this);
		phone.setRemoteAlertingListener(this);
		phone.setToneReceivedListener(this);

		//Verify mode, in which was started this activity
		boolean bIsIncoming = getIntent().getBooleanExtra(AbtoPhone.IS_INCOMING, true);
		boolean startedFromService = getIntent().getBooleanExtra(AbtoPhone.ABTO_SERVICE_MARKER, true);
		if (startedFromService) {
			Log.e("debug", String.valueOf(startedFromService));
			phone.initialize(true);
			phone.setInitializeListener(this);
		} else {
			answerCallByIntent();
		}

		// Cancel incoming call notification
		activeCallId = getIntent().getIntExtra(AbtoPhone.CALL_ID, AbtoPhone.INVALID_CALL_ID);
		if (bIsIncoming) AbtoCallEventsReceiver.cancelIncCallNotification(this, activeCallId);

		Log.d(THIS_FILE, "callId - " + activeCallId);

		TextView name = findViewById(R.id.caller_contact_name);
		TextView phoneTV = findViewById(R.id.textviewUserPhone);


		Log.e("debug remote contact", AbtoPhone.REMOTE_CONTACT);
		number = getIntent().getStringExtra(AbtoPhone.REMOTE_CONTACT).split(":")[1].split("@")[0];

		if (Build.VERSION.SDK_INT > 23) {
			if (ContextCompat.checkSelfPermission(getApplicationContext(),
					Manifest.permission.CALL_PHONE)
					!= PackageManager.PERMISSION_GRANTED) {

				ActivityCompat.requestPermissions(ScreenAV.this,
						new String[]{Manifest.permission.CALL_PHONE},
						MY_PERMISSIONS_REQUEST_CALL_PHONE);

				// MY_PERMISSIONS_REQUEST_CALL_PHONE is an
				// app-defined int constant. The callback method gets the
				// result of the request.
				Log.e("debug permissaion", "Permission denied 206");
			} else {
				Log.e("debug permissaion", "Permission granted");
				Log.e("start call", "211");
//				startCall();
			}
		} else {

			if (ActivityCompat.checkSelfPermission(ScreenAV.this,
					Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) {
				Toast.makeText(ScreenAV.this, "Permission Not Granted ", Toast.LENGTH_SHORT).show();
			} else {
				final String[] PERMISSIONS_STORAGE = {Manifest.permission.CALL_PHONE};
				ActivityCompat.requestPermissions(ScreenAV.this, PERMISSIONS_STORAGE, 9);
				Log.e("start call", "222");
				startCall();
			}
		}



//		TelephonyManager telephonyManager = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
//		telephonyManager.listen(new PhoneStateListener() {
//			@Override
//			public void onCallStateChanged(int state, String phoneNumber) {
//
//				if (state == TelephonyManager.CALL_STATE_IDLE) {
//					// Handle call disconnected event
//					// You could start the phone call activity here if you want
//					Log.e("debug", "CALL_STATE_IDLE " + state);
//					status.setText("End call : " + number);
////					try {
////						phone.hangUp(activeCallId);
////					} catch (RemoteException e) {
////						e.printStackTrace();
////					}
//				} else if (state == TelephonyManager.CALL_STATE_RINGING) {
//					// Handle incoming call event
//					status.setText("RINGING : " + number);
//
//					Log.e("debug", "CALL_STATE_RINGING " + state);
//				} else if (state == TelephonyManager.CALL_STATE_OFFHOOK) {
//					// Handle call answered event
//					// You could start the phone call activity here if you want
//					Log.e("debug", "CALL_STATE_OFFHOOK " + state);
//					Log.e("debug", "Call answered : " + number);
//					status.setText("Call answered : " + number);
//				}
//			}
//		}, PhoneStateListener.LISTEN_CALL_STATE);


		realm = Realm.getDefaultInstance();
		data = realm.where(Contact.class).contains("mobile", number).findFirst();
//		name.setText(data.getName());
		phoneTV.setText(number);


		mTotalTime = getIntent().getLongExtra(TOTAL_TIME, 0);
		mPointTime = getIntent().getLongExtra(POINT_TIME, 0);
		if (mTotalTime != 0) {
			mHandler.removeCallbacks(mUpdateTimeTask);
			mHandler.postDelayed(mUpdateTimeTask, 100);
		}

		status = findViewById(R.id.caller_call_status);
		status.setText(bIsIncoming ? "Incoming call" : "Dialing...");

		//Video controls
		localVideoSurface = findViewById(R.id.local_video);
		remoteVideoSurface = findViewById(R.id.remote_video);
		localVideoSurface.setVisibility(View.GONE);
		remoteVideoSurface.setVisibility(View.GONE);

//		incomingCallLayout = findViewById(R.id.incoming_call_layout);
//		incomingCallLayout.setVisibility(bIsIncoming ? View.VISIBLE : View.GONE);
//
//		callInProgressLayout = findViewById(R.id.call_in_progress_layout);
//		callInProgressLayout.setVisibility(View.GONE);

//		pickUpVideo = findViewById(R.id.caller_pick_up_video_button);
//		if (!startedFromService) 	pickUpVideo.setVisibility(phone.isVideoCall(activeCallId) ? View.VISIBLE : View.INVISIBLE);


		pickUp();
	}

	private void recordCall() {
		Log.e("record", "1");

		int sampleRate = 44100;
		int audioEncoding = AudioFormat.ENCODING_PCM_16BIT;
		int channelConfig = AudioFormat.CHANNEL_IN_MONO;
		int channelMask   = AudioFormat.CHANNEL_IN_MONO;
		int bufferSize = AudioRecord.getMinBufferSize(sampleRate, channelConfig, audioEncoding);



		if (ActivityCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO) == PackageManager.PERMISSION_GRANTED) {

			Log.e("record", "2");


			AudioFormat audioFormat = null;
			if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
				audioFormat = new AudioFormat.Builder()
						.setEncoding(audioEncoding)
						.setSampleRate(sampleRate)
						.setChannelMask(channelMask)
						.build();
			}

			if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {
				AudioRecord audioRecord = new AudioRecord.Builder()
						.setAudioFormat(audioFormat)
						.setAudioSource(MediaRecorder.AudioSource.MIC)
						.setBufferSizeInBytes(bufferSize)
						.build();
			}
			// TODO: Consider calling
			//    ActivityCompat#requestPermissions
			// here to request the missing permissions, and then overriding
			//   public void onRequestPermissionsResult(int requestCode, String[] permissions,
			//                                          int[] grantResults)
			// to handle the case where the user grants the permission. See the documentation
			// for ActivityCompat#requestPermissions for more details.

			AudioRecord sipAudioRecord = new AudioRecord(MediaRecorder.AudioSource.VOICE_COMMUNICATION, 16000,
					channelConfig, audioEncoding, bufferSize);

			AudioRecord simAudioRecord = new AudioRecord(MediaRecorder.AudioSource.VOICE_COMMUNICATION, 16000,
					channelConfig, audioEncoding, bufferSize);

// Create an AudioTrack object to play back the audio data
			AudioTrack audioTrack = new AudioTrack(AudioManager.STREAM_VOICE_CALL, 16000,
					AudioFormat.CHANNEL_OUT_MONO, AudioFormat.ENCODING_PCM_16BIT, bufferSize, AudioTrack.MODE_STREAM);

// Start recording audio data from both calls
			sipAudioRecord.startRecording();
			simAudioRecord.startRecording();

// Start playing back audio data
			audioTrack.play();

			byte[] buffer = new byte[bufferSize];
			while (isCallActive) { // isCallActive is a boolean variable that indicates if the calls are still active
				Log.e("record", "3");
				// Read audio data from the SIP call
				int sipRead = sipAudioRecord.read(buffer, 0, bufferSize);
				if (sipRead > 0) {

					Log.e("record", "4");
					// Write audio data to the AudioTrack object
					audioTrack.write(buffer, 0, sipRead);
				}

				// Read audio data from the SIM call
				int simRead = simAudioRecord.read(buffer, 0, bufferSize);
				if (simRead > 0) {
					Log.e("record", "5");
					// Write audio data to the AudioTrack object
					audioTrack.write(buffer, 0, simRead);
				}
			}

		}
		Log.e("record", "6");

	}
	final private int MY_PERMISSIONS_REQUEST_CALL_PHONE = 124;
	@Override
	public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
		super.onRequestPermissionsResult(requestCode, permissions, grantResults);
		if (requestCode == MY_PERMISSIONS_REQUEST_CALL_PHONE) {
			if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
				// Permission granted
				Log.e("start call", "351");
				startCall();
				Log.e("debug permissaion ", "phone call Permission granted");
			} else {
				// Permission denied
				Log.e("debug permissaion ", "phone call Permission denied 356");
			}
		}
	}
	private static String extractFromNumber(String log) {
		Pattern pattern = Pattern.compile("From: \"?(\\d+)\"? <sip:");
		Matcher matcher = pattern.matcher(log);
		if (matcher.find()) {
			return matcher.group(1);
		}
		return null;
	}

	private void startCall(){
		Log.e("debug", "start call : " + number);
		Intent callIntent = new Intent(Intent.ACTION_CALL);
		callIntent.setData(Uri.parse("tel:" + number));
		startActivity(callIntent);
		recordCall();
	}
//	public void resizeRemoteVideoWindow(int videoW, int videoH, boolean landscapeOrientation) {
//		// Get screen size
//		Point point = new Point();
//		getWindowManager().getDefaultDisplay().getSize(point);
//		int screenW = point.x;
//		int screenH = point.y;
//
//		if ( landscapeOrientation ) {
//			// Switch remote video width with height for landscape orientation
//			int temp = videoW;
//			videoW = videoH;
//			videoH = temp;
//		}
//
//		float videoSideKof = videoW / (float)videoH;
//		float screenSideKof = screenW / (float)screenH;
//
//		int viewW;
//		int viewH;
//
//		if ( videoSideKof > screenSideKof ) {
//			viewW = screenW;
//			viewH = (int) (viewW / (float)videoW * videoH);
//		} else {
//			viewH = screenH;
//			viewW = (int) (viewH / (float)videoH * videoW);
//		}
//
//		FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) remoteVideoSurface.getLayoutParams();
//		params.width = viewW;
//		params.height = viewH;
//		remoteVideoSurface.setLayoutParams(params);
//	}

	private void answerCallByIntent() {
		Log.e("answerCallByIntent", "start");
		if ( getIntent().getBooleanExtra(AbtoCallEventsReceiver.KEY_PICK_UP_AUDIO, false) ) {
			pickUp();
		}
		if ( getIntent().getBooleanExtra(AbtoCallEventsReceiver.KEY_PICK_UP_VIDEO, false) ) {
//			pickUpVideo(null);
		}
	}

//	private void startOutgoingCallByIntent()
//	{
//		//Skip if call is incoming
//		if ( getIntent().getBooleanExtra(AbtoPhone.IS_INCOMING, true)  ) return;
//
//		//Get number and mode
//		String sipNumber  = getIntent().getStringExtra(AbtoPhone.REMOTE_CONTACT);
//		boolean bVideo    = getIntent().getBooleanExtra(MainActivity.START_VIDEO_CALL, false);
//
//		// Start new call
//		try {
//			activeCallId = bVideo ? phone.startVideoCall(sipNumber, phone.getCurrentAccountId())
//					: phone.startCall(sipNumber, phone.getCurrentAccountId());
//
//		} catch (RemoteException e) {
//			activeCallId = -1;
//			e.printStackTrace();
//		}
//
//		//Verify returned callId.
//		//End this activity when call can't be started.
//		if(activeCallId==-1) {
//			Toast.makeText(ScreenAV.this, "Can't start call to: " + sipNumber, Toast.LENGTH_SHORT).show();
//			this.finish();
//		}
//	}


	@Override
	public void onInitializeState(OnInitializeListener.InitializeState state, String message) {
		if (state == InitializeState.SUCCESS) {
//			pickUpVideo.setVisibility(phone.isActive() && phone.isVideoCall(activeCallId) ? View.VISIBLE : View.INVISIBLE);
			phone.setInitializeListener(null);
			answerCallByIntent();
		}
	}

	@Override
	public void onCallConnected(int callId, String remoteContact) {
		incomingCallLayout.setVisibility(View.GONE);
		callInProgressLayout.setVisibility(View.VISIBLE);

		if (mTotalTime == 0L) {
			mPointTime = System.currentTimeMillis();
			mHandler.removeCallbacks(mUpdateTimeTask);
			mHandler.postDelayed(mUpdateTimeTask, 100);
		}

		try {
			phone.setMicrophoneMute(false);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		try {
			phone.setMicrophoneLevel((float)3.0);
		} catch (RemoteException e) {
			e.printStackTrace();
		}

		if(phone.isVideoCall(activeCallId))
		{
			phone.setVideoWindows(activeCallId, localVideoSurface, remoteVideoSurface);
			localVideoSurface.setZOrderOnTop(true);
			localVideoSurface.setZOrderMediaOverlay(true);

			showVideoWindows(true);
			disableProximity();
		}
		else {
			showVideoWindows(false);
			enableProximity();
		}

		status.setText("CallConnected");
	}

	@Override
	public void onCallDisconnected(int callId, String remoteContact, int statusCode, String statusMessage) {}

	@Override
	public void onCallDisconnected(int callId, String remoteContact, int statusCode, String message, String sipPacket)
	{
		if (callId == activeCallId)
		{
			finish();
			mTotalTime = 0;
		}
	}

	@Override
	public void onCallError(String remoteContact, int statusCode, String message)
	{
		Toast.makeText(ScreenAV.this, "onCallError: " + statusCode, Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onCallHeld(int callId, HoldState state) {
		if (state == HoldState.LOCAL_HOLD) 	status.setText("Local Hold");else
		if (state == HoldState.REMOTE_HOLD) status.setText("Remote Hold"); else
		if (state == HoldState.ACTIVE) 		status.setText("Active");
	}

	@Override
	public void onRemoteAlerting(int callId, int statusCode, long accId) {
		String statusText = "";

		if (activeCallId == AbtoPhone.INVALID_CALL_ID) 	activeCallId = callId;

		switch (statusCode) {
			case TRYING: 		        statusText = "Trying";			break;
			case RINGING:		        statusText = "Ringing";			break;
			case SESSION_PROGRESS:		statusText = "Session in progress";		break;
		}
		status.setText(statusText);
		Log.e("debug remote alerting", statusText);
	}

	@Override
	public void onToneReceived(int callId, char tone) {
		Toast.makeText(ScreenAV.this, "DTMF received: " + tone, Toast.LENGTH_SHORT).show();
	}

	public void hangUP(View view) {
		try {
			//if(bIsIncoming) phone.rejectCall();else//TODO
			phone.hangUp(activeCallId);
		} catch (RemoteException e) {
			Log.e(THIS_FILE, e.getMessage());
		}
	}

	public void recordCall(View view) {
		String filepath= Environment.getExternalStorageDirectory() + "/rec1.wav";

		try {
			phone.startRecording(activeCallId, filepath);
		} catch (RemoteException e) {
			Log.e(THIS_FILE, e.getMessage());
		}

	}

	public void holdCall(View view) {
		try {
			phone.holdRetriveCall(activeCallId);
		} catch (RemoteException e) {
			Log.e(THIS_FILE, e.getMessage());
		}
	}

	public void pickUp() {
		try {
			phone.answerCall(activeCallId, 200, false);
			isCallActive = true;
			Log.e("record", "0");
		} catch (RemoteException e) {
			Log.e(THIS_FILE, e.getMessage());
		}
	}

//	public void pickUpVideo(View view) {
//		try {
//			phone.answerCall(activeCallId, 200, true);
//		} catch (RemoteException e) {
//			Log.e(THIS_FILE, e.getMessage());
//		}
//	}

	private void showVideoWindows(boolean show) {
		localVideoSurface.setVisibility(show ? View.VISIBLE : View.GONE);
		remoteVideoSurface.setVisibility(show ? View.VISIBLE : View.GONE);
	}

	// ==========Timer==============
	private long mPointTime = 0;
	private long mTotalTime = 0;
	private Handler mHandler = new Handler();
	private Runnable mUpdateTimeTask = new Runnable() {
		public void run() {
			mTotalTime += System.currentTimeMillis() - mPointTime;
			mPointTime = System.currentTimeMillis();
			int seconds = (int) (mTotalTime / 1000);
			int minutes = seconds / 60;
			seconds = seconds % 60;
			if (seconds < 10) {
				status.setText("" + minutes + ":0" + seconds);
			} else {
				status.setText("" + minutes + ":" + seconds);
			}

			mHandler.postDelayed(this, 1000);
		}
	};

	// =============================

	@Override
	protected void onPause() {

		if (mScreenWakeLock != null && mScreenWakeLock.isHeld()) {
			mScreenWakeLock.release();
		}

		mHandler.removeCallbacks(mUpdateTimeTask);
		disableProximity();

		super.onPause();
	}

	@Override
	protected void onResume() {

		if (mTotalTime != 0L) {
			mHandler.removeCallbacks(mUpdateTimeTask);
			mHandler.postDelayed(mUpdateTimeTask, 100);
		}

		if (mScreenWakeLock != null) {
			mScreenWakeLock.acquire();
		}
		super.onResume();

	}

	/**
	 * executes when activity is destroyed;
	 */
	public void onDestroy() {
		super.onDestroy();

		mHandler.removeCallbacks(mUpdateTimeTask);

		phone.setCallConnectedListener(null);
		phone.setCallDisconnectedListener(null);
		phone.setOnCallHeldListener(null);
		phone.setRemoteAlertingListener(null);
		phone.setToneReceivedListener(null);
		phone.setVideoEventListener(null);
		disableProximity();
	}

	public void onStop() {
		super.onStop();
	}

	/**
	 * overrides panel buttons keydown functionality;
	 */
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		if (keyCode == KeyEvent.KEYCODE_BACK|| keyCode == KeyEvent.KEYCODE_HOME) {

			try {
				phone.hangUp(activeCallId);
			} catch (RemoteException e) {
				Log.e(THIS_FILE, e.getMessage());
			}
		}
		return super.onKeyDown(keyCode, event);
	}

	private void initWakeLocks() {
		PowerManager powerManager = (PowerManager) getSystemService(Context.POWER_SERVICE);

		int flags = PowerManager.SCREEN_BRIGHT_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP;
		mScreenWakeLock = powerManager.newWakeLock(flags, "com.abtotest.voiptest:wakelogtag");
		mScreenWakeLock.setReferenceCounted(false);

		int field= 0x00000020;
		try {
			field = PowerManager.class.getClass().getField("PROXIMITY_SCREEN_OFF_WAKE_LOCK").getInt(null);
		} catch (Throwable t) {
		}
		mProximityWakeLock = powerManager.newWakeLock(field, getLocalClassName());
	}

	private void enableProximity() {
		if (!mProximityWakeLock.isHeld()){
			mProximityWakeLock.acquire();
		}
	}

	private void disableProximity() {
		if (mProximityWakeLock.isHeld()) {
			mProximityWakeLock.release();
		}
	}
}

